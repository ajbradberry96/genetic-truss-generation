#BlueJ class context
comment0.params=joints\ width\ box
comment0.target=Member(Joint[],\ double,\ boolean)
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ Member\r\n\ @param\ joints\ The\ two\ joints\ this\ member\ spans\r\n
comment1.params=joints
comment1.target=Member(Joint[])
comment10.params=length_found
comment10.target=void\ setLength_found(boolean)
comment10.text=\r\n\ @param\ length_found\ the\ length_found\ to\ set\r\n
comment11.params=
comment11.target=void\ findCompressiveForce()
comment12.params=
comment12.target=void\ findTensileForce()
comment13.params=
comment13.target=void\ findWeight()
comment14.params=
comment14.target=double\ getUltimate_tensile_force()
comment14.text=\r\n\ @return\ the\ ultimate_tensile_force\r\n
comment15.params=ultimate_tensile_force
comment15.target=void\ setUltimate_tensile_force(double)
comment15.text=\r\n\ @param\ ultimate_tensile_force\ the\ ultimate_tensile_force\ to\ set\r\n
comment16.params=
comment16.target=double\ getUltimate_compressive_force()
comment16.text=\r\n\ @return\ the\ ultimate_compressive_force\r\n
comment17.params=ultimate_compressive_force
comment17.target=void\ setUltimate_compressive_force(double)
comment17.text=\r\n\ @param\ ultimate_compressive_force\ the\ ultimate_compressive_force\ to\ set\r\n
comment18.params=
comment18.target=boolean\ isFailed()
comment18.text=\r\n\ @return\ the\ failed\r\n
comment19.params=failed
comment19.target=void\ setFailed(boolean)
comment19.text=\r\n\ @param\ failed\ the\ failed\ to\ set\r\n
comment2.params=
comment2.target=boolean\ isFound()
comment2.text=\r\n\ Returns\ true\ if\ the\ tension\ of\ this\ member\ has\ been\ found\r\n\ @return\ tension_found\r\n
comment20.params=
comment20.target=double\ getWeight()
comment20.text=\r\n\ @return\ the\ weight\r\n
comment21.params=weight
comment21.target=void\ setWeight(double)
comment21.text=\r\n\ @param\ weight\ the\ weight\ to\ set\r\n
comment22.params=box
comment22.target=void\ setBox(boolean)
comment23.params=current_load
comment23.target=double\ getMaxCompressiveForce(double)
comment24.params=current_load
comment24.target=double\ getMaxTensileForce(double)
comment25.params=width
comment25.target=void\ setWidth(double)
comment26.params=
comment26.target=java.lang.String\ toString()
comment3.params=tension
comment3.target=void\ setTension(double)
comment3.text=\r\n\ Set\ the\ tension\ in\ this\ member\ and\ note\ that\ the\ tension\ is\ set\ in\ tension_found\r\n\ @param\ tension\ The\ new\ tension\ in\ the\ member\r\n
comment4.params=
comment4.target=double\ getTension()
comment4.text=\r\n\ The\ tension\ currently\ set\ for\ this\ member.\r\n\ @return\ The\ current\ tension\r\n
comment5.params=joint
comment5.target=Joint\ getOtherJoint(Joint)
comment5.text=\r\n\ Get\ the\ other\ joint\ that\ this\ member\ is\ connected\ to\r\n\ @param\ joint\ the\ Joint\ that\ this\ member\ is\ known\ to\ have\r\n\ @return\ The\ other\ Joint\r\n
comment6.params=
comment6.target=Joint[]\ getJoints()
comment7.params=
comment7.target=double\ getLength()
comment7.text=\r\n\ @return\ the\ length\r\n
comment8.params=
comment8.target=void\ findLength()
comment8.text=\r\n\ calculate\ the\ length\ of\ the\ member\r\n
comment9.params=
comment9.target=boolean\ isLength_found()
comment9.text=\r\n\ @return\ the\ length_found\r\n
numComments=27
